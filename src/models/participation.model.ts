import {
  belongsTo,
  Entity,
  model,
  property
} from '@loopback/repository';
import {Contest, ContestWithRelations} from './contest.model';
import {User, UserWithRelations} from './user.model';

@model()
export class Participation extends Entity {
  @property({
    description: 'participation\'s record id, generated by postgreSQL, can be changed to loopback or postgreSQL uuid generator or custom',
    type: 'number',
    id: true,
    generated: true,
    postgresql: {
      columnName: 'id',
      dataType: 'integer',
      dataLength: null,
      dataPrecision: null,
      dataScale: 0,
      nullable: 'NO',
      unique: true,
    },
  })
  id: number;

  //no neet to be defined, it's already done in contest
  @belongsTo(() => Contest)
  contestId: number;

  //no neet to be defined, it's already done in user
  @belongsTo(() => User)
  userId: number;

  constructor(data?: Partial<Participation>) {
    super(data);
  }
}

export interface ParticipationRelations {
  user: UserWithRelations;
  contest: ContestWithRelations;
}

export type ParticipationWithRelations = Participation & ParticipationRelations;
