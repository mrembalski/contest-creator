import {
  belongsTo,
  Entity,
  model,
  property
} from '@loopback/repository';
import {Solution, SolutionWithRelations} from './solution.model';
import {User, UserWithRelations} from './user.model';

@model()
export class Mark extends Entity {
  @property({
    description: 'mark\'s record id, generated by postgreSQL, can be changed to loopback or postgreSQL uuid generator or custom',
    type: 'number',
    id: true,
    generated: true,
    postgresql: {
      columnName: 'id',
      dataType: 'integer',
      dataLength: null,
      dataPrecision: null,
      dataScale: 0,
      nullable: 'NO',
      unique: true,
    },
  })
  id: number;

  //no neet to be defined, it's already done in solution
  @belongsTo(() => Solution)
  solutionId: number;

  //no neet to be defined, it's already done in user
  @belongsTo(() => User)
  userId: number;

  @property({
    description: 'mark\'s comment',
    type: 'string',
    id: false,
    required: true,
    postgresql: {
      columnName: 'mark_comment',
      datatype: 'character varying',
      dataLength: 250,
      nullable: 'NO',
    },
  })
  comment: string;

  @property({
    description: 'mark\'s value',
    type: 'number',
    id: false,
    required: true,
    postgresql: {
      columnName: 'mark_value',
      dataType: 'integer',
      dataLength: null,
      dataPrecision: null,
      dataScale: null,
      nullable: 'NO',
    },
  })
  value: 0 | 2 | 5 | 6;

  constructor(data?: Partial<Mark>) {
    super(data);
  }
}

export interface MarkRelations {
  user: UserWithRelations;
  solution: SolutionWithRelations;
}

export type MarkWithRelations = Mark & MarkRelations;
