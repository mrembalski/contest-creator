import {
  Entity,
  model,
  property
} from '@loopback/repository';

@model({
  settings: {
    foreignKeys: {
      fk_solution_taskId: {
        name: 'fk_solution_taskId',
        entity: 'task',
        entityKey: 'id',
        foreignKey: 'taskId',
      },
      fk_solution_userId: {
        name: 'fk_solution_userId',
        entity: 'user',
        entityKey: 'id',
        foreignKey: 'userId',
      },
    },
  }
})
export class Solution extends Entity {
  @property({
    description: 'solution\'s record id, generated by postgreSQL, can be changed to loopback or postgreSQL uuid generator or custom',
    type: 'number',
    id: true,
    generated: true,
    postgresql: {
      columnName: 'id',
      dataType: 'integer',
      dataLength: null,
      dataPrecision: null,
      dataScale: 0,
      nullable: 'NO',
      unique: true,
    },
  })
  id: number;

  //no neet to be defined, it's already done in contest
  @property({
    postgresql: {
      columnName: 'task_id'
    }
  })
  taskId: number;

  //no neet to be defined, it's already done in user
  @property({
    postgresql: {
      columnName: 'user_id'
    }
  })
  userId: number;


  @property({
    description: 'solution\'s text',
    type: 'string',
    id: false,
    required: true,
    postgresql: {
      columnName: 'solution_text',
      datatype: 'character varying',
      dataLength: 2000,
      nullable: 'NO',
    },
  })
  text: string;

  constructor(data?: Partial<Solution>) {
    super(data);
  }
}

export interface SolutionRelations {
}

export type SolutionWithRelations = Solution & SolutionRelations;
